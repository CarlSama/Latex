    
\begin{description}
    \item{\textbf{Question}}:\\%textbf加粗
		Given an array of integers, find two numbers such that they add up to a specific target number.\\
		The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.\\
		You may assume that each input would have exactly one solution.

    \item{\textbf{Example}}\\
		Input: numbers={2, 7, 11, 15}, target=9\\
		Output: index1=1, index2=2

    \item{\textbf{Anslysis}}\\
		需要询问数组是否时已排序的？\\
		如果数组是未排序的，排序后查找的话，时间复杂度为O(nlgn + n),空间复杂度为O(1);也可以使用hash来存储每个数值所需要的补值，再通过O($n$)的时间来寻找\\
		如果是已排序的，可以使用双指针的方法

    \item{\textbf{Solution}}
	\item{1. Hash} : \fbox{时间复杂度O(n) , 空间复杂度O(n) }\\
		注意使用hash来寻找时，不要处理自己\\
		\begin{lstlisting}
class Solution {
	public:
		vector<int> twoSum(vector<int>& nums, int target) {
			vector<int> res;
			unordered_map<int,int> hashmap;

			for(int i=0;i<nums.size();++i){
				auto iter = hashmap.find(nums[i]);

				if(iter == hashmap.end()){
					hashmap.insert(pair<int,int>(target - nums[i], i+1));
				}else{
					if(i+1 < iter->second){
						res.push_back(i+1);	res.push_back(iter->second);
					}else{
						res.push_back(iter->second);	res.push_back(i+1);
					}
				}
			}

			return res;
		}
};
		\end{lstlisting}
	\item{1. Two pointer} : \fbox{时间复杂度O(n) , 空间复杂度O(1) }\\
		\begin{lstlisting}
		\end{lstlisting}

\end{description}

